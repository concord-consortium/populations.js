// Generated by CoffeeScript 1.9.1
(function() {
  var Agent, BasicAnimal, Environment, Events, Interactive, Rule, Species, ToolButton, Trait, env, hawkSpecies, helpers, plantSpecies, rabbitSpecies;

  helpers = require('helpers');

  Environment = require('models/environment');

  Species = require('models/species');

  Agent = require('models/agent');

  Rule = require('models/rule');

  Trait = require('models/trait');

  Interactive = require('ui/interactive');

  Events = require('events');

  ToolButton = require('ui/tool-button');

  BasicAnimal = require('models/agents/basic-animal');

  plantSpecies = require('species/fast-plants-roots');

  rabbitSpecies = require('species/white-brown-rabbits-genetics');

  hawkSpecies = require('species/hawks');

  env = require('environments/snow');

  window.model = {
    brownness: 0,
    run: function() {
      this.interactive = new Interactive({
        environment: env,
        speedSlider: true,
        addOrganismButtons: [
          {
            species: plantSpecies,
            imagePath: "images/agents/grass/tallgrass.png",
            traits: [],
            limit: 180,
            scatter: 45
          }, {
            species: rabbitSpecies,
            imagePath: "images/agents/rabbits/rabbit2.png",
            traits: [],
            limit: 60,
            scatter: 60
          }, {
            species: hawkSpecies,
            imagePath: "images/agents/hawks/hawk.png",
            traits: [
              new Trait({
                name: "mating desire bonus",
                "default": -10
              })
            ],
            limit: 2,
            scatter: 2
          }
        ],
        toolButtons: [
          {
            type: ToolButton.INFO_TOOL
          }
        ]
      });
      document.getElementById('environment').appendChild(this.interactive.getEnvironmentPane());
      this.env = env;
      this.env.wrapEastWest = true;
      this.env.wrapNorthSouth = true;
      this.plantSpecies = plantSpecies;
      this.hawkSpecies = hawkSpecies;
      this.rabbitSpecies = rabbitSpecies;
      Events.addEventListener(Environment.EVENTS.AGENT_ADDED, (function(_this) {
        return function(evt) {
          var agent;
          agent = evt.detail.agent;
          if (!agent.bred && agent.species === _this.rabbitSpecies) {
            return agent.set('age', ExtMath.randomInt(9));
          }
        };
      })(this));
      return env.addRule(new Rule({
        action: (function(_this) {
          return function(agent) {
            if (agent.species === rabbitSpecies) {
              if (agent.get('color') === 'brown') {
                return agent.set('chance of being seen', 0.5 - (_this.brownness * 0.5));
              } else {
                return agent.set('chance of being seen', _this.brownness * 0.65);
              }
            }
          };
        })(this)
      }));
    },
    setupGraph: function() {
      var outputOptions;
      outputOptions = {
        title: "Number of rabbits",
        xlabel: "Time (s)",
        ylabel: "Number of rabbits",
        xmax: 120,
        xmin: 0,
        ymax: 70,
        ymin: 0,
        xTickCount: 10,
        yTickCount: 10,
        xFormatter: "2d",
        yFormatter: "2d",
        realTime: false,
        fontScaleRelativeToParent: true,
        sampleInterval: Environment.DEFAULT_RUN_LOOP_DELAY / 1000,
        dataType: 'samples',
        dataColors: [[153, 153, 153], [153, 85, 0], [255, 0, 0]]
      };
      this.outputGraph = LabGrapher('#graph', outputOptions);
      Events.addEventListener(Environment.EVENTS.RESET, (function(_this) {
        return function() {
          return _this.outputGraph.reset();
        };
      })(this));
      return Events.addEventListener(Environment.EVENTS.STEP, (function(_this) {
        return function() {
          return _this.outputGraph.addSamples(_this.countRabbits());
        };
      })(this));
    },
    agentsOfSpecies: function(species) {
      var a, i, len, ref, set;
      set = [];
      ref = this.env.agents;
      for (i = 0, len = ref.length; i < len; i++) {
        a = ref[i];
        if (a.species === species) {
          set.push(a);
        }
      }
      return set;
    },
    countRabbits: function() {
      var a, brownRabbits, i, len, ref, whiteRabbits;
      whiteRabbits = 0;
      brownRabbits = 0;
      ref = this.agentsOfSpecies(this.rabbitSpecies);
      for (i = 0, len = ref.length; i < len; i++) {
        a = ref[i];
        if (a.get('color') === 'white') {
          whiteRabbits++;
        }
        if (a.get('color') === 'brown') {
          brownRabbits++;
        }
      }
      return [whiteRabbits, brownRabbits];
    },
    setupTimer: function() {
      var backgroundChangeable, changeInterval;
      backgroundChangeable = false;
      changeInterval = 10;
      Events.addEventListener(Environment.EVENTS.STEP, (function(_this) {
        return function() {
          var t;
          t = Math.floor(_this.env.date * Environment.DEFAULT_RUN_LOOP_DELAY / 1000);
          if (t > 119) {
            _this.env.stop();
            _this.showMessage("All the snow is gone. Look at the graph.<br/>How many white and brown rabbits are left in the field?");
            return;
          }
          if (t % changeInterval === 0 && backgroundChangeable && t / changeInterval <= 9) {
            _this.brownness = 0.1 * t / changeInterval;
            _this.changeBackground(t / changeInterval);
            return backgroundChangeable = false;
          } else if (t % changeInterval !== 0) {
            return backgroundChangeable = true;
          }
        };
      })(this));
      return Events.addEventListener(Environment.EVENTS.RESET, (function(_this) {
        return function() {
          return _this.env.setBackground("images/environments/snow.png");
        };
      })(this));
    },
    changeBackground: function(n) {
      if (!((0 < n && n < 10))) {
        return;
      }
      return this.env.setBackground("images/environments/snow-" + n + ".png");
    },
    showMessage: function(message, callback) {
      return helpers.showMessage(message, this.env.getView().view.parentElement, callback);
    },
    setupPopulationControls: function() {
      return Events.addEventListener(Environment.EVENTS.STEP, (function(_this) {
        return function() {
          _this.checkPlants();
          _this.checkRabbits();
          return _this.checkHawks();
        };
      })(this));
    },
    setProperty: function(agents, prop, val) {
      var a, i, len, results;
      results = [];
      for (i = 0, len = agents.length; i < len; i++) {
        a = agents[i];
        results.push(a.set(prop, val));
      }
      return results;
    },
    addAgent: function(species, traits) {
      var agent;
      if (traits == null) {
        traits = [];
      }
      agent = species.createAgent(traits);
      agent.setLocation(this.env.randomLocation());
      return this.env.addAgent(agent);
    },
    addedRabbits: false,
    addedHawks: false,
    numRabbits: 0,
    resourceConsumptionTrait: new Trait({
      name: 'resource consumption rate',
      "default": 10
    }),
    brownTrait: new Trait({
      name: 'color',
      "default": 'a:b,b:b',
      isGenetic: true
    }),
    whiteTrait: new Trait({
      name: 'color',
      "default": 'a:B,b:b',
      isGenetic: true
    }),
    checkRabbits: function() {
      var allPlants, allRabbits, numPlants;
      allRabbits = this.agentsOfSpecies(this.rabbitSpecies);
      allPlants = this.agentsOfSpecies(this.plantSpecies);
      this.numRabbits = allRabbits.length;
      if (this.numRabbits === 0) {
        if (this.addedRabbits && !this.addedHawks) {
          this.env.stop();
          this.showMessage("Uh oh, all the rabbits have died!<br/>Did you add any plants? Reset the model and try it again.");
          return;
        }
      }
      numPlants = allPlants.length;
      if (!this.addedRabbits && this.numRabbits > 0) {
        this.addedRabbits = true;
      }
      this.setProperty(allRabbits, "mating desire bonus", 40 - this.numRabbits);
      this.setProperty(allRabbits, "metabolism", this.numRabbits / 12.5);
      this.setProperty(allRabbits, "hunger bonus", -35);
      if (this.numRabbits < 25) {
        return this.setProperty(allRabbits, "max offspring", 5);
      } else {
        return this.setProperty(allRabbits, "max offspring", 2);
      }
    },
    checkHawks: function() {
      var allHawks, numHawks;
      allHawks = this.agentsOfSpecies(this.hawkSpecies);
      numHawks = allHawks.length;
      if (numHawks === 0) {
        if (this.addedHawks) {
          if (this.addedRabbits) {
            this.env.stop();
            this.showMessage("Uh oh, all the animals have died!<br/>Was there any food for the rabbits to eat? Reset the model and try it again.");
          } else {
            this.env.stop();
            this.showMessage("Uh oh, all the hawks have died!<br/>Were there any rabbits for them to eat? Reset the model and try it again.");
          }
        }
        return;
      }
      if (!this.addedHawks && numHawks > 0) {
        this.addedHawks = true;
      }
      if (this.addedHawks && this.numRabbits > 0 && numHawks < 2) {
        this.addAgent(this.hawkSpecies);
      }
      if (numHawks < 3 && this.numRabbits > 0) {
        this.setProperty(allHawks, "is immortal", true);
        this.setProperty(allHawks, "mating desire bonus", -10);
        return this.setProperty(allHawks, "hunger bonus", 5);
      } else {
        if (allHawks[0].get("is immortal")) {
          this.setProperty(allHawks, "is immortal", false);
        }
        if (numHawks > 4) {
          this.setProperty(allHawks, "mating desire bonus", -30);
          return this.setProperty(allHawks, "hunger bonus", -40);
        } else {
          this.setProperty(allHawks, "mating desire bonus", -15);
          return this.setProperty(allHawks, "hunger bonus", -5);
        }
      }
    },
    checkPlants: function() {
      var allPlants;
      allPlants = this.agentsOfSpecies(this.plantSpecies);
      return this.setProperty(allPlants, 'growth rate', 3.5 / allPlants.length);
    },
    preload: ["images/agents/grass/tallgrass.png", "images/agents/rabbits/rabbit2.png", "images/agents/hawks/hawk.png", "images/environments/snow.png", "images/environments/snow-1.png", "images/environments/snow-2.png", "images/environments/snow-3.png", "images/environments/snow-4.png", "images/environments/snow-5.png", "images/environments/snow-6.png", "images/environments/snow-7.png", "images/environments/snow-8.png", "images/environments/snow-9.png"]
  };

  window.onload = function() {
    return helpers.preload([model, env, plantSpecies, rabbitSpecies, hawkSpecies], function() {
      model.run();
      model.setupGraph();
      model.setupTimer();
      return model.setupPopulationControls();
    });
  };

}).call(this);
