// Generated by CoffeeScript 1.7.1
(function() {
  var Agent, BasicAnimal, Environment, Events, Interactive, Rule, Species, ToolButton, Trait, env, hawkSpecies, helpers, rabbitSpecies;

  helpers = require('helpers');

  Environment = require('models/environment');

  Species = require('models/species');

  Agent = require('models/agent');

  Rule = require('models/rule');

  Trait = require('models/trait');

  Interactive = require('interactive/interactive');

  Events = require('events');

  ToolButton = require('interactive/tool-button');

  BasicAnimal = require('models/basic-animal');

  rabbitSpecies = require('species/white-brown-rabbits');

  hawkSpecies = require('species/hawks');

  env = require('environments/snow');

  window.model = {
    brownness: 0,
    run: function() {
      this.interactive = new Interactive({
        environment: env,
        speedSlider: false,
        addOrganismButtons: [
          {
            species: rabbitSpecies,
            imagePath: "images/agents/rabbits/rabbit2.png",
            traits: [
              new Trait({
                name: "mating desire bonus",
                "default": -20
              }), new Trait({
                name: "hunger bonus",
                "default": -10
              }), new Trait({
                name: "age",
                "default": 3
              }), new Trait({
                name: "resource consumption rate",
                "default": 10
              }), new Trait({
                name: "color",
                "default": "white"
              })
            ],
            scatter: 30
          }, {
            species: rabbitSpecies,
            imagePath: "images/agents/rabbits/smallbunny.png",
            traits: [
              new Trait({
                name: "mating desire bonus",
                "default": -20
              }), new Trait({
                name: "hunger bonus",
                "default": -10
              }), new Trait({
                name: "age",
                "default": 3
              }), new Trait({
                name: "color",
                "default": "brown"
              })
            ],
            scatter: 30
          }
        ],
        toolButtons: [
          {
            type: ToolButton.INFO_TOOL
          }
        ]
      });
      document.getElementById('environment').appendChild(this.interactive.getEnvironmentPane());
      this.env = env;
      this.hawkSpecies = hawkSpecies;
      this.rabbitSpecies = rabbitSpecies;
      this.addAgent(this.hawkSpecies, [["mating desire bonus", -10]]);
      this.addAgent(this.hawkSpecies, [["mating desire bonus", -10]]);
      return env.addRule(new Rule({
        action: (function(_this) {
          return function(agent) {
            if (agent.species === rabbitSpecies) {
              if (agent.get('color') === 'brown') {
                return agent.set('chance of being seen', 0.6 - (_this.brownness * 0.6));
              } else {
                return agent.set('chance of being seen', _this.brownness * 0.6);
              }
            }
          };
        })(this)
      }));
    },
    chartData1: null,
    chart1: null,
    setupGraph: function() {
      var options1;
      this.chartData1 = new google.visualization.DataTable();
      this._setupChartData(this.chartData1);
      options1 = this._getChartOptions("top");
      this.chart1 = new google.visualization.ColumnChart(document.getElementById('chart1'));
      this.chart1.draw(this.chartData1, options1);
      return Events.addEventListener(Environment.EVENTS.STEP, (function(_this) {
        return function() {
          var agent, counts, i, _i, _j, _len, _ref;
          counts = {
            top: [0, 0, 0]
          };
          _ref = _this.env.agents;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            agent = _ref[_i];
            if (agent.species === _this.rabbitSpecies) {
              if (agent.get('color') === "brown") {
                counts.top[1] += 1;
              } else {
                counts.top[2] += 1;
              }
            }
          }
          for (i = _j = 0; _j <= 1; i = ++_j) {
            _this.chartData1.setValue(i, 1, counts.top[i + 1]);
          }
          return _this.chart1.draw(_this.chartData1, options1);
        };
      })(this));
    },
    _setupChartData: function(chartData) {
      chartData.addColumn('string', 'Rabbit types');
      chartData.addColumn('number', 'Number of rabbits');
      chartData.addColumn({
        type: 'string',
        role: 'style'
      });
      return chartData.addRows([["Brown", 0, "color: #904f10"], ["White", 0, "color: #c5c4c3"]]);
    },
    _getChartOptions: function(titleMod) {
      var options;
      return options = {
        title: 'Rabbits in the field',
        hAxis: {
          title: 'Rabbit types'
        },
        vAxis: {
          title: 'Number of rabbits',
          minValue: 0,
          maxValue: 20,
          gridlines: {
            count: 6
          }
        },
        legend: {
          position: 'none'
        },
        width: 300,
        height: 250
      };
    },
    agentsOfSpecies: function(species) {
      var a, set, _i, _len, _ref;
      set = [];
      _ref = this.env.agents;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        a = _ref[_i];
        if (a.species === species) {
          set.push(a);
        }
      }
      return set;
    },
    countRabbits: function() {
      var a, brownRabbits, whiteRabbits, _i, _len, _ref;
      whiteRabbits = 0;
      brownRabbits = 0;
      _ref = this.agentsOfSpecies(this.rabbitSpecies);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        a = _ref[_i];
        if (a.get('color') === 'white') {
          whiteRabbits++;
        }
        if (a.get('color') === 'brown') {
          brownRabbits++;
        }
      }
      return [whiteRabbits, brownRabbits];
    },
    setupTimer: function() {
      var backgroundChangeable, changeInterval;
      backgroundChangeable = false;
      changeInterval = 10;
      return Events.addEventListener(Environment.EVENTS.RESET, (function(_this) {
        return function() {
          return _this.env.setBackground("images/environments/snow.png");
        };
      })(this));
    },
    changeBackground: function(n) {
      if (!((0 < n && n < 10))) {
        return;
      }
      return this.env.setBackground("images/environments/snow-" + n + ".png");
    },
    showMessage: function(message, callback) {
      return helpers.showMessage(message, this.env.getView().view.parentElement, callback);
    },
    setupPopulationControls: function() {
      return Events.addEventListener(Environment.EVENTS.STEP, (function(_this) {
        return function() {
          _this.checkRabbits();
          return _this.checkHawks();
        };
      })(this));
    },
    setProperty: function(agents, prop, val) {
      var a, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = agents.length; _i < _len; _i++) {
        a = agents[_i];
        _results.push(a.set(prop, val));
      }
      return _results;
    },
    addAgent: function(species, properties) {
      var agent, prop, _i, _len;
      if (properties == null) {
        properties = [];
      }
      agent = species.createAgent();
      agent.setLocation(this.env.randomLocation());
      for (_i = 0, _len = properties.length; _i < _len; _i++) {
        prop = properties[_i];
        agent.set(prop[0], prop[1]);
      }
      return this.env.addAgent(agent);
    },
    addedRabbits: false,
    addedHawks: false,
    numRabbits: 0,
    checkRabbits: function() {
      var allRabbits, color;
      allRabbits = this.agentsOfSpecies(this.rabbitSpecies);
      this.numRabbits = allRabbits.length;
      if (this.numRabbits === 0) {
        if (this.addedRabbits && !this.addedHawks) {
          this.env.stop();
          this.showMessage("Uh oh, all the rabbits have died!<br/>Did you add any plants? Reset the model and try it again.");
          return;
        }
      }
      if (!this.addedRabbits && this.numRabbits > 0) {
        this.addedRabbits = true;
      }
      if (this.addedRabbits && this.numRabbits < 9) {
        this.addAgent(this.rabbitSpecies, [["resource consumption rate", 10]]);
        this.addAgent(this.rabbitSpecies, [["resource consumption rate", 10]]);
        color = this.brownness > 0.5 ? "brown" : "white";
        this.addAgent(this.rabbitSpecies, [["resource consumption rate", 10], ["color", color]]);
        this.addAgent(this.rabbitSpecies, [["resource consumption rate", 10], ["color", color]]);
      }
      if (this.numRabbits < 16) {
        this.setProperty(allRabbits, "min offspring", 2);
        this.setProperty(allRabbits, "speed", 70);
      } else {
        this.setProperty(allRabbits, "mating desire bonus", -20);
        this.setProperty(allRabbits, "hunger bonus", -10);
        this.setProperty(allRabbits, "min offspring", 1);
        this.setProperty(allRabbits, "speed", 50);
      }
      if (this.numRabbits > 50) {
        return this.setProperty(allRabbits, "mating desire bonus", -40);
      }
    },
    checkHawks: function() {
      var allHawks, numHawks;
      allHawks = this.agentsOfSpecies(this.hawkSpecies);
      numHawks = allHawks.length;
      if (numHawks === 0) {
        if (this.addedHawks) {
          if (this.addedRabbits) {
            this.env.stop();
            this.showMessage("Uh oh, all the animals have died!<br/>Was there any food for the rabbits to eat? Reset the model and try it again.");
          } else {
            this.env.stop();
            this.showMessage("Uh oh, all the hawks have died!<br/>Were there any rabbits for them to eat? Reset the model and try it again.");
          }
        }
        return;
      }
      if (!this.addedHawks && numHawks > 0) {
        this.addedHawks = true;
      }
      if (this.addedHawks && this.numRabbits > 0 && numHawks < 2) {
        this.addAgent(this.hawkSpecies);
      }
      if (numHawks < 3 && this.numRabbits > 0) {
        this.setProperty(allHawks, "is immortal", true);
        this.setProperty(allHawks, "mating desire bonus", -10);
        return this.setProperty(allHawks, "hunger bonus", 5);
      } else {
        if (allHawks[0].get("is immortal")) {
          this.setProperty(allHawks, "is immortal", false);
        }
        if (numHawks > 4) {
          this.setProperty(allHawks, "mating desire bonus", -30);
          return this.setProperty(allHawks, "hunger bonus", -40);
        } else {
          this.setProperty(allHawks, "mating desire bonus", -15);
          return this.setProperty(allHawks, "hunger bonus", -5);
        }
      }
    },
    preload: ["images/agents/rabbits/rabbit2.png", "images/agents/hawks/hawk.png", "images/environments/snow.png"]
  };

  window.onload = function() {
    return helpers.preload([model, env, rabbitSpecies, hawkSpecies], function() {
      model.run();
      model.setupGraph();
      model.setupTimer();
      return model.setupPopulationControls();
    });
  };

}).call(this);
