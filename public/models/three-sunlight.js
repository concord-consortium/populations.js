// Generated by CoffeeScript 1.7.1
(function() {
  var Agent, Environment, Events, Interactive, Rule, Species, ToolButton, Trait, env, helpers, plantSpecies;

  helpers = require('helpers');

  Environment = require('models/environment');

  Species = require('models/species');

  Agent = require('models/agent');

  Rule = require('models/rule');

  Trait = require('models/trait');

  Interactive = require('interactive/interactive');

  ToolButton = require('interactive/tool-button');

  Events = require('events');

  plantSpecies = require('species/varied-plants');

  env = require('environments/sunlight-3-flowerboxes');

  window.model = {
    run: function() {
      plantSpecies.defs.CAN_SEED = false;
      plantSpecies.addTrait(new Trait({
        name: "is immortal",
        "default": true
      }));
      this.interactive = new Interactive({
        environment: env,
        addOrganismButtons: [
          {
            species: plantSpecies,
            imagePath: "images/agents/varied-plants/buttons/seedpack_6.png",
            traits: [
              new Trait({
                name: "size",
                "default": 5
              }), new Trait({
                name: "root size",
                "default": 5
              }), new Trait({
                name: "gen",
                "default": 1
              }), new Trait({
                name: "complete",
                "default": false
              })
            ],
            limit: 1
          }
        ],
        toolButtons: [
          {
            type: ToolButton.INFO_TOOL
          }, {
            type: ToolButton.CARRY_TOOL
          }
        ]
      });
      document.getElementById('environment').appendChild(this.interactive.getEnvironmentPane());
      this.env = env;
      return this.plantSpecies = plantSpecies;
    },
    setupDialogs: function() {
      var allAgentsAreHealthy, atLeastOneAgentAdded, generation, initializeVariables, makeSeeds, makeSeedsCount, message1StepCount, message2StepCount, message3StepCount, message4StepCount, onTopOfSomeone, popSize, previousHealth, readyToMakeSeeds, setLocation, showMessage, shownNoMorePlantsMessage, shownTwoWiltedMessage, shownWiltedMessage, waitingForMessage1, waitingForMessage2, waitingForMessage3, waitingForMessage4, yearCount;
      yearCount = message1StepCount = message2StepCount = message3StepCount = message4StepCount = waitingForMessage1 = waitingForMessage2 = waitingForMessage3 = waitingForMessage4 = makeSeedsCount = readyToMakeSeeds = popSize = generation = previousHealth = shownNoMorePlantsMessage = shownWiltedMessage = shownTwoWiltedMessage = atLeastOneAgentAdded = null;
      initializeVariables = (function(_this) {
        return function() {
          _this.env.usingSeasons = true;
          yearCount = 0;
          message1StepCount = 0;
          message2StepCount = 0;
          message3StepCount = 0;
          message4StepCount = 0;
          waitingForMessage1 = false;
          waitingForMessage2 = false;
          waitingForMessage3 = false;
          waitingForMessage4 = false;
          makeSeedsCount = 0;
          readyToMakeSeeds = false;
          popSize = -1;
          generation = 1;
          previousHealth = -1;
          shownNoMorePlantsMessage = false;
          shownWiltedMessage = false;
          shownTwoWiltedMessage = false;
          return atLeastOneAgentAdded = false;
        };
      })(this);
      initializeVariables();
      showMessage = (function(_this) {
        return function(message) {
          _this.env.stop();
          return helpers.showMessage(message, _this.env.getView().view.parentElement, function() {
            return _this.env.start();
          });
        };
      })(this);
      Events.addEventListener(Environment.EVENTS.RESET, function() {
        return initializeVariables();
      });
      Events.addEventListener(Environment.EVENTS.SEASON_CHANGED, (function(_this) {
        return function() {
          var agents, firstAgent, season;
          agents = _this.env.agents;
          if (agents.length > 0) {
            firstAgent = _this.env.agents[0];
            season = _this.env.season;
            if (season === "summer") {
              yearCount++;
            }
            if (firstAgent.get("gen") === 1) {
              if (firstAgent.get("health") < 1.0) {
                if (season === "summer") {
                  if (!shownWiltedMessage) {
                    showMessage("You planted your seed in a flowerbox where the light level is wrong for it.\n" + "It won't make a flower and it won't drop any seeds.");
                    shownWiltedMessage = true;
                  }
                  return waitingForMessage3 = true;
                } else if (season === "winter" && waitingForMessage3) {
                  return firstAgent.set('is immortal', false);
                }
              } else if (season === "fall" && firstAgent.get('has flowers')) {
                return readyToMakeSeeds = true;
              }
            } else if (firstAgent.get("gen") === 2 && !firstAgent.get("complete")) {
              if (season === "summer") {
                if (!shownTwoWiltedMessage) {
                  return waitingForMessage1 = true;
                }
              } else if (season === "fall") {
                waitingForMessage2 = true;
                return waitingForMessage4 = true;
              }
            }
          }
        };
      })(this));
      onTopOfSomeone = (function(_this) {
        return function(x1, y1) {
          var otherAgent, x2, y2, _i, _len, _ref;
          _ref = _this.env.agents;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            otherAgent = _ref[_i];
            x2 = otherAgent.getLocation().x;
            y2 = otherAgent.getLocation().y;
            if (Math.abs(x1 - x2) < 20) {
              return true;
            }
          }
          return false;
        };
      })(this);
      setLocation = (function(_this) {
        return function(parent, child) {
          var tries, xLocChild, xLocParent, yLocChild, yLocParent;
          xLocParent = 100;
          yLocParent = parent.getLocation().y;
          tries = 0;
          while (true) {
            tries++;
            xLocChild = xLocParent + ExtMath.randomInt(400) + 20;
            yLocChild = yLocParent - 5 + ExtMath.randomInt(10);
            if (!(tries < 20 && (_this.env.isInBarrier(xLocChild, yLocChild) || onTopOfSomeone(xLocChild, yLocChild)))) {
              child.setLocation({
                x: xLocChild,
                y: yLocChild
              });
              return;
            }
          }
        };
      })(this);
      makeSeeds = (function(_this) {
        return function(agent) {
          var child, i, _results;
          agent.set("has flowers", false);
          generation = 2;
          _results = [];
          while (_this.env.agents.length < 7) {
            i = _this.env.agents.length;
            child = agent.createOffspring();
            child.set('gen', 2);
            child.set('is immortal', true);
            if (i < 5) {
              child.set('size', 5);
            } else if (i < 6) {
              child.set('size', 4);
            } else if (i < 7) {
              child.set('size', 6);
            }
            _results.push(setLocation(agent, child));
          }
          return _results;
        };
      })(this);
      allAgentsAreHealthy = (function(_this) {
        return function(agents) {
          var agent, health, _i, _len;
          if (_this.env.carriedAgent != null) {
            return false;
          }
          for (_i = 0, _len = agents.length; _i < _len; _i++) {
            agent = agents[_i];
            health = agent.get("health");
            if (health < 0.99) {
              return false;
            }
          }
          return true;
        };
      })(this);
      return Events.addEventListener(Environment.EVENTS.STEP, (function(_this) {
        return function() {
          var agent, agents, firstAgent, season, _i, _len, _results;
          agents = _this.env.agents;
          if (agents.length > 0) {
            atLeastOneAgentAdded = true;
          }
          if (agents.length === 0) {
            if (!atLeastOneAgentAdded) {
              _this.env.date = 0;
              return;
            }
            if (!shownNoMorePlantsMessage && atLeastOneAgentAdded && (_this.env.carriedAgent == null)) {
              if (waitingForMessage3) {
                showMessage("Your plant wilted and died, and left no seeds so no new plants will grow.\n Hit 'reset' and try again.");
              } else {
                showMessage("You have no more plants!\n If you want to restart, click the Restart button.");
              }
              shownNoMorePlantsMessage = true;
            }
            return;
          }
          if (agents.length < popSize && agents.length < 6 && (_this.env.carriedAgent == null)) {
            showMessage("Uh oh, you dropped a plant in between the flower boxes and it died!\n If you want to restart, click the Restart button.");
            popSize = agents.length;
            return;
          }
          popSize = agents.length;
          if (generation === 1) {
            firstAgent = agents[0];
            if (readyToMakeSeeds) {
              makeSeedsCount++;
              if (makeSeedsCount === 10) {
                firstAgent.set("is immortal", false);
                firstAgent.set("has flowers", false);
                makeSeeds(firstAgent);
              }
            }
          }
          if (waitingForMessage1) {
            message1StepCount++;
            if (message1StepCount === 15) {
              season = _this.env.season;
              showMessage("Two of the new plants are wilted.\nUse the Information Tool to look at the plants more closely.\nDo all the plants have the same leaf size?");
              message1StepCount = 0;
              waitingForMessage1 = false;
              shownTwoWiltedMessage = true;
            }
          }
          if (waitingForMessage2) {
            message2StepCount++;
            if (message2StepCount === 50) {
              if (!allAgentsAreHealthy(agents)) {
                showMessage("Try moving your wilted plants to different flowerboxes and see what happens.");
              }
              message2StepCount = 0;
              waitingForMessage2 = false;
              _this.env.usingSeasons = false;
            }
          }
          if (waitingForMessage4) {
            if (allAgentsAreHealthy(agents)) {
              message4StepCount++;
            }
            if (message4StepCount === 16) {
              if (_this.env.agents.length === 6) {
                showMessage("Good job! Each of your plants is in an environment that makes it healthy!\nIf you want to experiment again, you can reset the model,\nor you can continue on.");
              } else {
                showMessage("Each of your plants is in an environment that makes it healthy!\nHowever, some of your plants were dropped between flower boxes.\nIf you want to try again to make all six plants healthy, you can reset the model.");
              }
              waitingForMessage4 = false;
              _results = [];
              for (_i = 0, _len = agents.length; _i < _len; _i++) {
                agent = agents[_i];
                _results.push(agent.set("complete", true));
              }
              return _results;
            }
          }
        };
      })(this));
    },
    preload: ["images/agents/varied-plants/buttons/seedpack_6.png"]
  };

  window.onload = function() {
    return helpers.preload([model, env, plantSpecies], function() {
      model.run();
      return model.setupDialogs();
    });
  };

}).call(this);
