// Generated by CoffeeScript 1.9.1
(function() {
  var Agent, BasicAnimal, Environment, Events, Interactive, Rule, Species, ToolButton, Trait, env, hawkSpecies, helpers, plantSpecies, plusOne, rabbitSpecies;

  helpers = require('helpers');

  Environment = require('models/environment');

  Species = require('models/species');

  Agent = require('models/agent');

  Rule = require('models/rule');

  Trait = require('models/trait');

  Interactive = require('ui/interactive');

  Events = require('events');

  ToolButton = require('ui/tool-button');

  BasicAnimal = require('models/agents/basic-animal');

  plantSpecies = require('species/fast-plants-roots');

  rabbitSpecies = require('species/white-brown-rabbits');

  hawkSpecies = require('species/hawks');

  plusOne = require('species/plus-one');

  env = require('environments/snow');

  window.model = {
    hawk: null,
    startingPlants: 200,
    startingRabbits: 25,
    setupEnvironment: function() {
      var color, i, j, k, l, len, plant, rabbit, ref, ref1, ref2;
      for (i = j = 1, ref = this.startingPlants; 1 <= ref ? j <= ref : j >= ref; i = 1 <= ref ? ++j : --j) {
        plant = plantSpecies.createAgent();
        plant.setLocation(this.env.randomLocation());
        this.env.addAgent(plant);
      }
      ref1 = ['white', 'brown'];
      for (k = 0, len = ref1.length; k < len; k++) {
        color = ref1[k];
        for (i = l = 1, ref2 = this.startingRabbits; 1 <= ref2 ? l <= ref2 : l >= ref2; i = 1 <= ref2 ? ++l : --l) {
          rabbit = rabbitSpecies.createAgent();
          rabbit.set('age', 10);
          rabbit.set('mating desire bonus', 10);
          rabbit.set('hunger bonus', -10);
          rabbit.set('resource consumption rate', 10);
          rabbit.set('fear bonus', -1000);
          rabbit.set('color', color);
          rabbit.setLocation(this.env.randomLocation());
          this.env.addAgent(rabbit);
        }
      }
      this.hawk = hawkSpecies.createAgent();
      this.hawk.setLocation(this.env.randomLocation());
      this.hawk.set('is immortal', true);
      this.hawk.set('age', 20);
      this.hawk.set('speed', 0);
      this.hawk.set('default speed', 0);
      this.hawk.set('calculate drives', false);
      this.hawk.set('wings', 0);
      this.hawk.set('current behavior', BasicAnimal.BEHAVIOR.WANDERING);
      return this.env.addAgent(this.hawk);
    },
    run: function() {
      this.interactive = new Interactive({
        environment: env,
        speedSlider: false,
        addOrganismButtons: [],
        toolButtons: []
      });
      document.getElementById('environment').appendChild(this.interactive.getEnvironmentPane());
      this.env = env;
      this.plantSpecies = plantSpecies;
      this.hawkSpecies = hawkSpecies;
      this.rabbitSpecies = rabbitSpecies;
      this.plusOne = plusOne;
      this.setupEnvironment();
      return Events.addEventListener(Environment.EVENTS.RESET, (function(_this) {
        return function() {
          return _this.setupEnvironment();
        };
      })(this));
    },
    setupGraph: function() {
      var outputOptions;
      outputOptions = {
        title: "Number of rabbits",
        xlabel: "Time (s)",
        ylabel: "Number of rabbits",
        xmax: 30,
        xmin: 0,
        ymax: 80,
        ymin: 0,
        xTickCount: 15,
        yTickCount: 8,
        xFormatter: "2d",
        yFormatter: "2d",
        realTime: false,
        fontScaleRelativeToParent: true,
        sampleInterval: Environment.DEFAULT_RUN_LOOP_DELAY / 1000,
        dataType: 'samples',
        dataColors: ["#999999", "#995500"]
      };
      this.outputGraph = LabGrapher('#graph', outputOptions);
      this.outputGraph.addSamples([this.startingRabbits, this.startingRabbits]);
      Events.addEventListener(Environment.EVENTS.RESET, (function(_this) {
        return function() {
          _this.outputGraph.reset();
          return _this.outputGraph.addSamples([_this.startingRabbits, _this.startingRabbits]);
        };
      })(this));
      return Events.addEventListener(Environment.EVENTS.STEP, (function(_this) {
        return function() {
          var a, brownRabbits, j, len, ref, whiteRabbits;
          whiteRabbits = 0;
          brownRabbits = 0;
          ref = _this.env.agents;
          for (j = 0, len = ref.length; j < len; j++) {
            a = ref[j];
            if (a.species === _this.rabbitSpecies && a.get('color') === 'white') {
              whiteRabbits++;
            }
            if (a.species === _this.rabbitSpecies && a.get('color') === 'brown') {
              brownRabbits++;
            }
          }
          return _this.outputGraph.addSamples([whiteRabbits, brownRabbits]);
        };
      })(this));
    },
    numEaten: 0,
    brownEaten: 0,
    whiteEaten: 0,
    setupControls: function() {
      var caughtElem;
      this.env.addState('hawk-follow-mouse', {
        click: (function(_this) {
          return function(evt) {
            _this.hawk.setLocation({
              x: evt.envX,
              y: evt.envY
            });
            _this.hawk.set('wings', 1);
            _this._tryToEat();
            return setTimeout(function() {
              return _this.hawk.set('wings', 0);
            }, 200);
          };
        })(this),
        mousemove: (function(_this) {
          return function(evt) {
            return _this.hawk.setLocation({
              x: evt.envX,
              y: evt.envY
            });
          };
        })(this)
      });
      this.env.setState('hawk-follow-mouse');
      caughtElem = document.getElementById('caught-value');
      Events.addEventListener(Environment.EVENTS.RESET, (function(_this) {
        return function() {
          _this.env.setState('hawk-follow-mouse');
          _this.numEaten = 0;
          _this.brownEaten = 0;
          _this.whiteEaten = 0;
          return caughtElem.innerHTML = "0";
        };
      })(this));
      return Events.addEventListener(Environment.EVENTS.AGENT_EATEN, (function(_this) {
        return function(evt) {
          if (evt.detail.predator === _this.hawk) {
            _this._createPlusOne();
            _this.numEaten++;
            if (evt.detail.prey.get('color') === 'brown') {
              _this.brownEaten++;
            }
            if (evt.detail.prey.get('color') === 'white') {
              _this.whiteEaten++;
            }
            return caughtElem.innerHTML = "" + _this.numEaten;
          }
        };
      })(this));
    },
    _tryToEat: function() {
      var color, eatingDist, nearest;
      nearest = this.hawk._nearestPrey();
      if (nearest != null) {
        eatingDist = this.hawk.get('eating distance');
        if (nearest.distanceSq < Math.pow(eatingDist, 2)) {
          color = nearest.agent.get('color');
          if (color === 'brown' || ExtMath.flip() === 1) {
            return this.hawk._eatPrey(nearest.agent);
          }
        }
      }
    },
    _createPlusOne: function() {
      var plus;
      plus = this.plusOne.createAgent();
      plus.setLocation(this.hawk.getLocation());
      this.env.addAgent(plus);
      return setTimeout(function() {
        return plus.die();
      }, 1000);
    },
    _numRabbits: function() {
      var a, count, j, len, ref;
      count = 0;
      ref = this.env.agents;
      for (j = 0, len = ref.length; j < len; j++) {
        a = ref[j];
        if (a.species === this.rabbitSpecies) {
          count++;
        }
      }
      return count;
    },
    setupTimer: function() {
      return Events.addEventListener(Environment.EVENTS.STEP, (function(_this) {
        return function() {
          var t;
          t = Math.floor(_this.env.date * Environment.DEFAULT_RUN_LOOP_DELAY / 1000);
          if (t >= 30 || _this._numRabbits() === 0) {
            _this.env.stop();
            if (_this.numEaten === 0) {
              return _this.showMessage("Oh no, you didn't catch any rabbits!<br/>Press Reset to try again, and be sure to click on the rabbits to eat them.");
            } else {
              return _this.showMessage("Good job! You caught " + _this.numEaten + " rabbits!<br/>You caught " + _this.whiteEaten + " white rabbits and " + _this.brownEaten + " brown rabbits.", function() {
                return _this.showMessage("Take a picture of the graph. Then continue on.");
              });
            }
          }
        };
      })(this));
    },
    showMessage: function(message, callback) {
      return helpers.showMessage(message, this.env.getView().view.parentElement, callback);
    }
  };

  window.onload = function() {
    return helpers.preload([env, plantSpecies, rabbitSpecies, hawkSpecies, plusOne], function() {
      model.run();
      model.setupGraph();
      model.setupControls();
      return model.setupTimer();
    });
  };

}).call(this);
